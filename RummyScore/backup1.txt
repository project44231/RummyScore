import SwiftUI

// Enum to represent score options with their corresponding values
enum ScoreOption: String, CaseIterable, Codable {
    case zero = "0"
    case game = "Game"
    case drop = "Drop"
    case middleDrop = "M-Drop"
    case fullCount = "Full Count"
    case custom = "Custom"

    var value: Int {
        switch self {
        case .zero:
            return 0
        case .game:
            return 0
        case .drop:
            return ScoreSettings.shared.dropValue
        case .middleDrop:
            return ScoreSettings.shared.middleDropValue
        case .fullCount:
            return ScoreSettings.shared.fullCountValue
        case .custom:
            return -1  // Custom value needs to be set by the user
        }
    }
}

// Singleton for managing score settings
class ScoreSettings: ObservableObject {
    static let shared = ScoreSettings()
    @Published var dropValue: Int = 25
    @Published var middleDropValue: Int = 40
    @Published var fullCountValue: Int = 80
}

// Struct to handle player scores
struct PlayerScore: Codable {
    var scoreOption: ScoreOption
    var customValue: Int?
}

// Model for each Player
struct Player: Identifiable, Codable {
    var id = UUID()
    var name: String
    var scores: [PlayerScore]
    
    var totalScore: Int {
        return scores.reduce(0) { $0 + ($1.scoreOption.value == -1 ? ($1.customValue ?? 0) : $1.scoreOption.value) }
    }
}

// Formatter for handling number input
let numberFormatter: NumberFormatter = {
    let formatter = NumberFormatter()
    formatter.numberStyle = .decimal
    formatter.minimum = 0
    return formatter
}()

// Main view of the app
struct ContentView: View {
    @State private var players: [Player] = []
    @State private var newPlayerName = ""
    @State private var roundCount = 0
    @State private var showConfirmationDialog = false

    @ObservedObject var scoreSettings = ScoreSettings.shared

    let boxWidth: CGFloat = 120
    let boxHeight: CGFloat = 60

    var body: some View {
        NavigationView {
            ZStack {
                VStack {
                    // Title
                    Text("GMD Rummy Score")
                        .font(.largeTitle)
                        .padding()

                    // Initialize score values section
                    Group {
                        Text("Initialize Score Values")
                            .font(.headline)
                        HStack {
                            VStack {
                                Text("Drop Value:")
                                TextField("Drop Value", value: $scoreSettings.dropValue, formatter: numberFormatter)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                    .keyboardType(.numberPad)
                                    .padding()
                            }
                            VStack {
                                Text("M-Drop Value:")
                                TextField("M-Drop Value", value: $scoreSettings.middleDropValue, formatter: numberFormatter)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                    .keyboardType(.numberPad)
                                    .padding()
                            }
                            VStack {
                                Text("Full Count Value:")
                                TextField("Full Count Value", value: $scoreSettings.fullCountValue, formatter: numberFormatter)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                    .keyboardType(.numberPad)
                                    .padding()
                            }
                        }
                    }
                    .padding()

                    // Add new player section
                    HStack {
                        TextField("Enter player's name", text: $newPlayerName)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                            .padding()

                        Button(action: addPlayer) {
                            Text("Add Player")
                                .padding(.horizontal)
                                .padding(.vertical, 10)
                                .background(Color.green)
                                .foregroundColor(.white)
                                .cornerRadius(8)
                        }
                        .disabled(newPlayerName.isEmpty)
                    }
                    .padding()

                    // ScrollView for players and scores
                    ScrollView {
                        VStack(spacing: 10) {
                            ScrollView(.horizontal) {
                                LazyVGrid(columns: Array(repeating: GridItem(.fixed(boxWidth), spacing: 10), count: players.count), spacing: 10) {
                                    ForEach(players.indices, id: \.self) { index in
                                        VStack {
                                            // Player name and total score
                                            VStack(alignment: .center) {
                                                Text(players[index].name)
                                                    .font(.headline)
                                                    .multilineTextAlignment(.center)
                                                    .frame(width: boxWidth, height: boxHeight / 2)
                                                    .background(Color(.systemGray6))
                                                    .border(Color.black, width: 1)
                                                Text("Total: \(players[index].totalScore)")
                                                    .font(.subheadline)
                                                    .multilineTextAlignment(.center)
                                                    .frame(width: boxWidth, height: boxHeight / 2)
                                                    .background(Color(.systemGray6))
                                                    .border(Color.black, width: 1)
                                            }
                                            .frame(height: boxHeight)

                                            // Display score options for each round
                                            ForEach(0..<roundCount, id: \.self) { round in
                                                HStack {
                                                    if players[index].scores[round].scoreOption == .custom {
                                                        // Custom score input with check to avoid NaN
                                                        TextField("Custom Score", value: Binding(
                                                            get: { players[index].scores[round].customValue ?? 0 },
                                                            set: {
                                                                players[index].scores[round].customValue = max(0, $0) // Avoid negative or NaN values
                                                            }
                                                        ), formatter: numberFormatter)
                                                        .keyboardType(.numberPad)
                                                        .padding()
                                                        .frame(width: boxWidth, height: boxHeight)
                                                        .background(gradientBackground(for: .custom))
                                                        .border(Color.black, width: 1)
                                                    } else {
                                                        // Picker for score options with gradient background
                                                        Picker("Select Score", selection: Binding(
                                                            get: { players[index].scores[round].scoreOption },
                                                            set: { players[index].scores[round].scoreOption = $0 }
                                                        )) {
                                                            ForEach(ScoreOption.allCases, id: \.self) { option in
                                                                Text(option.rawValue).tag(option)
                                                            }
                                                        }
                                                        .pickerStyle(MenuPickerStyle())
                                                        .frame(width: boxWidth, height: boxHeight)
                                                        .background(gradientBackground(for: players[index].scores[round].scoreOption)) // Apply gradient color
                                                        .border(Color.black, width: 1)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                .padding()
                            }

                            // Add Score button
                            if !players.isEmpty {
                                Button(action: addScore) {
                                    Text("Add Score")
                                        .padding(.horizontal)
                                        .padding(.vertical, 10)
                                        .background(Color.blue)
                                        .foregroundColor(.white)
                                        .cornerRadius(8)
                                }
                                .padding(.top)
                            }
                        }
                    }
                    .padding(.horizontal)
                }
            }
        }
    }

    // Add a player function
    private func addPlayer() {
        let newPlayer = Player(name: newPlayerName, scores: Array(repeating: PlayerScore(scoreOption: .zero, customValue: 0), count: roundCount))
        players.append(newPlayer)
        newPlayerName = "" // Clear text field
    }

    // Add a score function
    private func addScore() {
        for index in players.indices {
            players[index].scores.append(PlayerScore(scoreOption: .zero, customValue: 0)) // Add a new score
        }
        roundCount += 1
    }

    // Function to return gradient background color based on selected score option
    private func gradientBackground(for option: ScoreOption) -> LinearGradient {
        switch option {
        case .drop:
            return LinearGradient(gradient: Gradient(colors: [Color.gray.opacity(0.6), Color.gray.opacity(0.9)]), startPoint: .top, endPoint: .bottom)
        case .middleDrop:
            return LinearGradient(gradient: Gradient(colors: [Color.orange.opacity(0.6), Color.orange.opacity(0.9)]), startPoint: .top, endPoint: .bottom)
        case .fullCount:
            return LinearGradient(gradient: Gradient(colors: [Color.red.opacity(0.6), Color.red.opacity(0.9)]), startPoint: .top, endPoint: .bottom)
        case .game:
            return LinearGradient(gradient: Gradient(colors: [Color.green.opacity(0.6), Color.green.opacity(0.9)]), startPoint: .top, endPoint: .bottom)
        default:
            return LinearGradient(gradient: Gradient(colors: [Color.white.opacity(0.6), Color.white.opacity(0.9)]), startPoint: .top, endPoint: .bottom)
        }
    }
}

// Preview
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
